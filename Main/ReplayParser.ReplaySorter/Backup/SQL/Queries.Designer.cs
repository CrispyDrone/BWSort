//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReplayParser.ReplaySorter.Backup.SQL {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Queries {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Queries() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ReplayParser.ReplaySorter.Backup.SQL.Queries", typeof(Queries).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to insert into replaybackups (backupid, replayid, filename)
        ///values (@BackupId, @ReplayId, @FileName);
        ///.
        /// </summary>
        internal static string AddReplayToBackup {
            get {
                return ResourceManager.GetString("AddReplayToBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to create table replays (
        ///	id integer primary key autoincrement,
        ///	hash text NOT NULL,
        ///	bytes blob NOT NULL,
        ///	UNIQUE ( hash )
        ///);
        ///
        ///create table backups (
        ///	id integer primary key autoincrement,
        ///	name text NOT NULL,
        ///	comment text,
        ///	rootdirectory text NOT NULL,
        ///	date text NOT NULL
        ///);
        ///
        ///create table replaybackups (
        ///	backupid integer NOT NULL,
        ///	replayid integer NOT NULL,
        ///	filename text NOT NULL,
        ///	PRIMARY KEY ( backupid, replayid, filename )
        ///) WITHOUT ROWID;.
        /// </summary>
        internal static string CreateDatabase {
            get {
                return ResourceManager.GetString("CreateDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select Id, Name, Comment, RootDirectory, Date
        ///from backups.
        /// </summary>
        internal static string GetAllBackups {
            get {
                return ResourceManager.GetString("GetAllBackups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select id, Name, Comment, RootDirectory, Date
        ///from backups
        ///where id=@Id;.
        /// </summary>
        internal static string GetBackupById {
            get {
                return ResourceManager.GetString("GetBackupById", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select Id, Name, Comment, RootDirectory, Date
        ///from backups
        ///where id=@Id;
        ///
        ///select r.Id, r.Hash, r.Bytes, rb.FileName
        ///from backups b
        ///inner join replaybackups rb on b.id = rb.backupid
        ///inner join replays r on rb.replayid = r.id
        ///where b.id=@Id;.
        /// </summary>
        internal static string GetBackupByIdWithReplays {
            get {
                return ResourceManager.GetString("GetBackupByIdWithReplays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select count(*)
        ///from backups b
        ///inner join replaybackups rb
        ///on b.id = rb.backupid
        ///where b.id = @Id
        ///group by b.id;
        ///.
        /// </summary>
        internal static string GetReplayCountOfBackup {
            get {
                return ResourceManager.GetString("GetReplayCountOfBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to select id 
        ///from replays 
        ///where Hash=@Hash;.
        /// </summary>
        internal static string GetReplayIdByHash {
            get {
                return ResourceManager.GetString("GetReplayIdByHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to insert into backups (name, comment, rootdirectory, date)
        ///values (@Name, @Comment, @RootDirectory,date(&apos;now&apos;));
        ///select last_insert_rowid();
        ///.
        /// </summary>
        internal static string InsertBackup {
            get {
                return ResourceManager.GetString("InsertBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to insert into replays (hash, bytes)
        ///values (@Hash, @Bytes);
        ///select last_insert_rowid();
        ///.
        /// </summary>
        internal static string InsertReplay {
            get {
                return ResourceManager.GetString("InsertReplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to delete from replaybackups;
        ///delete from replays;
        ///delete from backups;.
        /// </summary>
        internal static string RemoveAllBackupsAndReplays {
            get {
                return ResourceManager.GetString("RemoveAllBackupsAndReplays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With ReplaysToDelete
        ///as
        ///(
        ///	select replayId, @BackupId as backupid, count(*) as NumberOfBackups
        ///	from replaybackups
        ///	where backupid = @BackupId
        ///	group by replayId
        ///	having count(*) = 1
        ///)
        ///delete r 
        ///from replays r
        ///inner join ReplaysToDelete rtd
        ///on r.id = rtd.replayId;
        ///
        ///delete rb
        ///from replaybackups rb
        ///inner join ReplaysToDelete rtd
        ///on rb.replayid = rtd.replayid and rb.backupid = rtd.backupid;
        ///
        ///delete from backups
        ///where backupid=@BackupId;
        ///.
        /// </summary>
        internal static string RemoveBackupByIdWithReplays {
            get {
                return ResourceManager.GetString("RemoveBackupByIdWithReplays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TEMP TABLE IF NOT EXISTS Variables (Name TEXT PRIMARY KEY, Value TEXT);
        ///
        ///INSERT INTO Variables (Name, Value) 
        ///VALUES	(&apos;NumberOfTables&apos;, 
        ///			CAST((
        ///				select 
        ///					case count(*)
        ///						when 0 then 0
        ///						when 3 then 1
        ///						else 2
        ///					end
        ///				from sqlite_master
        ///				where type=&apos;table&apos; and tbl_name not like &apos;%sequence%&apos;
        ///			) as text)
        ///		);
        ///
        ///INSERT INTO Variables (Name, Value)
        ///VALUES	(&apos;TableNamesOk&apos;,
        ///			CAST((
        ///				select
        ///					case count(*)
        ///						when 0 then 0
        ///						when 3 then 1
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VerifyDatabaseSchema {
            get {
                return ResourceManager.GetString("VerifyDatabaseSchema", resourceCulture);
            }
        }
    }
}
